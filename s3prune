#!/bin/bash

# Environment variables that need to be set before running the script.
BUCKET=${BUCKET:-"your_bucket_name"} # Replace "your_bucket_name" with your actual bucket name.
PREFIX=${PREFIX:-"your_prefix/"} # Replace "your_prefix/" with the actual prefix.
ENDPOINT_URL=${ENDPOINT_URL:-"your_s3_endpoint"} # Replace "your_s3_endpoint" with the S3 service endpoint URL.

# The maximum number of object versions to process in a single batch.
MAX_KEYS=1000

# Function to delete a batch of versions
delete_batch() {
    # Create a JSON payload for the delete operation using jq
    delete_payload=$(echo "$1" | jq '{Objects: ., Quiet: true}')
    
    # Create a temporary file to store the JSON payload
    delete_payload_file=$(mktemp)
    
    # Write the JSON payload to the temporary file
    echo "$delete_payload" > "$delete_payload_file"
    
    # Execute the delete operation using the AWS CLI
    aws s3api delete-objects --bucket "$BUCKET" --delete "file://$delete_payload_file" --endpoint-url "$ENDPOINT_URL"
    
    # Remove the temporary file after the delete operation
    rm "$delete_payload_file"
}

# Get a list of all object versions using the AWS CLI and jq
versions=$(aws s3api list-object-versions --bucket "$BUCKET" --prefix "$PREFIX" --endpoint-url "$ENDPOINT_URL")

# Extract versions that are not the latest using jq
versions_to_delete=$(echo "$versions" | jq -c '[.Versions[] | select(.IsLatest | not) | {Key:.Key, VersionId:.VersionId}]')

# Determine the number of versions to delete by counting the array elements
num_versions=$(echo "$versions_to_delete" | jq -r 'length')

# Check if there are versions to delete
if [ "$num_versions" -eq 0 ]; then
    echo "No old versions to delete."
    exit 0
fi

# Split the list of versions to delete into batches and delete them
for ((i=0; i<num_versions; i+=MAX_KEYS)); do
    # Select a subset of versions to delete based on the batch size
    batch=$(echo "$versions_to_delete" | jq ".[$i:$((i + MAX_KEYS))]")
    
    # Call the delete_batch function to process the current batch
    delete_batch "$batch"
done

# Print out the number of deleted old versions
echo "Deleted $num_versions old versions."
